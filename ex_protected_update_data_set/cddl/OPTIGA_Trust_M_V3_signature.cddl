; OPTIGA(TM) Trust (Family Trust X, Trust M...) Signature structure
;
; This file contains a CDDL (CBOR Data Definition Language) definition for a Manifest used within OPTIGA(TM) Trust Protected update feature.
; It describes the serialization format of a manifest as CBOR.
;
;
; Naming Conventions:
; (1) Existing CDDL Definitions profiled for OPTIGA(TM) Trust are enhanced 
;     at the END with _Trust
;     e.g. COSE_Sign1_Trust
; (2) Definitions specific for OPTIGA(TM) Trust are defined with Trust_ in the 
;     beginning, the same ways as done in COSE (where COSE_ is at the beginning)
;     e.g. Trust_PayloadVersion
; (3) Definition used by OPTIGA(TM) Trust and OPTIGA(TM) TPM are defined with 
;     IFX_ in the beginning
;     e.g. IFX_DigestSize
;
; Links:
; [CBOR]: https://tools.ietf.org/html/rfc7049 
; [CDDL]: https://tools.ietf.org/html/draft-ietf-cbor-cddl-05
; [COSE]: https://tools.ietf.org/html/rfc8152
; [SUIT_DRAFTv2]: https://tools.ietf.org/html/draft-moran-suit-manifest-02
; [SUIT_DRAFTv3]: https://tools.ietf.org/html/draft-moran-suit-manifest-03
; [COSE_RSA]: https://tools.ietf.org/html/rfc8230
;
; The range of proprietary values to be used [-65700.....-65899].
; RSA-SSA-PKCS1-V1_5-SHA-256 = -65700
; IFX_KDF-TLS12_PRF_SHA256   = -65720
; 
; 
; 

; [COSE] 4.4. Signing and Verification Process
; Define Container for the signature structure
Sig_structure = [
    context : "Signature1",
    body_protected : bstr .cbor protected-signed-header-Trust,
    external_aad : bstr .size 0,
    payload: bstr .cbor Trust_manifest,
]

Trust_SignatureSize = &(
    ECC_256: 64,        ;Raw signature: ECDSA (r|s) acc. to FIPS 186-4
                        ;E.g. for ECC NIST P256, size is 64 Bytes 
                        ;(the 0's must be prepended if r/s component is less than key size)
    ECC_384: 96,        ;Raw signature: ECDSA (r|s) acc. to FIPS 186-4
                        ;E.g. for ECC NIST P384, size is 96 Bytes 
                        ;(the 0's must be prepended if r/s component is less than key size)
    ECC_512: 128,       ;Raw signature: ECDSA (r|s) acc. to FIPS 186-4
                        ;E.g. for ECC Brain pool P512, size is 128 Bytes 
                        ;(the 0's must be prepended if r/s component is less than key size)
    ECC_521: 132,       ;Raw signature: ECDSA (r|s) acc. to FIPS 186-4
                        ;E.g. for ECC NIST P521, size is 132 Bytes 
                        ;(the 0's must be prepended if r/s component is less than key size)
                        ;the unused bits in the last byte are set to zero.

    RSA_1024_EXP: 128,  ;RSA Raw Signature for the key length 1024 bits
    RSA_2048_EXP: 256,  ;RSA Raw Signature for the key length 2048 bits
)

Trust_SignAlgorithms = &(
    ES-256: -7,                             ;[COSE]; ECDSA acc. to FIPS 186-4 and not deterministic version as suggested in Section 8.1 in COSE
    RSA-SSA-PKCS1-V1_5-SHA-256: -65700,     ;[TRUST_PROP]; RSASSA PKCS#1 V1.5 w/ SHA-256
)

IFX_DigestSize = &(
    SHA2-256-digest-size: 32,
)

DigestAlgorithms = &(                    
    SHA-256: 41,               ;SHA2
) /uint .size 1

KeyDerivationAlgorithms = &(                    
    IFX_KDF-TLS12_PRF_SHA256: -65720,       ;[TRUST_PROP] - TLSv1.2 PRF with SHA256
)

Trust_PayloadType  = &(        ;[TRUST_PROP]
    Payload_Data: -1,          ;[TRUST_PROP]; To send the data to OPTIGA(TM) Trust Data object
    Payload_Key: -3,           ;[TRUST_PROP]; To send the keys (Asymmetric or  symmetric keys) to OPTIGA(TM) Trust Key object
    Payload_MetaData: -2,      ;[TRUST_PROP]; To send the metadata to OPTIGA(TM) Trust Data/Key object
)

Trust_AddInfo_WriteType = &(   ;[TRUST_PROP]
    Write: 1,                  ;Updates/writes the data in the target oid, starting from the offset specified
                               ;(Used Length gets updated to (Offset + Length of the data provided), 
                               ;if this value is greater than the current value in the object metadata)

    EraseAndWrite: 2,          ;Erases the complete data in the target oid, writes the data from the offset specified 
                               ;(Used Length of the data object = Offset + Length of the data provided)
) /uint .size 1

Trust_KeyAlgorithms = &(       ;[TRUST_PROP]
    ECC-NIST-P256: 3,
    ECC-NIST-P384: 4,
    ECC-NIST-P521: 5,
    ECC-BRAINPOOL-P256-R1: 19,      ;0x13
    ECC-BRAINPOOL-P384-R1: 21,      ;0x15
    ECC-BRAINPOOL-P512-R1: 22,      ;0x16
    RSA-1024-Exp  : 65,
    RSA-2048-Exp  : 66,
    AES-128       : 129,        ;0x81
    AES-192       : 130,        ;0x82
    AES-256       : 131,        ;0x83
)

protected-signed-header-Trust = {
    1 => Trust_SignAlgorithms,              ;[COSE] and [TRUST_PROP]
}

unprotected-signed-header-Trust = {
    4 => bstr .size 2,                      ;[COSE]; key identifier:Root of Trust, Trust Anchor OID
}

Trust_manifest = [                          ;[TRUST_PROP]; OPTIGA(TM) Trust Manifest
    manifestVersion: 1,                     ;[SUIT_DRAFTv2]; Manifest data model version
    ;digestInfo: DigestInfo,                ;[SUIT_DRAFTv2]; Digest algorithm used within manifest
    ;textReference: bstr,                   ;[SUIT_DRAFTv2]; Digest of the associated text map
    ;nonce: bstr .size 8,                   ;[SUIT_DRAFTv2]; Nonce 8 byte (IFX_PROP)
    ;sequence: uint,                        ;[SUIT_DRAFTv2]; SequenceNumber; 
                                            ;current UTC time as unix epoch (Unix timestamp in seconds); 
                                            ;Store as 8 byte value internally (IFX_PROP)
    preConditions: nil,                     ;[SUIT_DRAFTv2]; Array with preconditions, not used
    postConditions: nil,                    ;[SUIT_DRAFTv2]; Array with postconditions, not used
    ;directives: [],                        ;[SUIT_DRAFTv2]; Array with directives, not used
    resources: Trust_resource,              ;[TRUST_PROP]; No Array as [SUIT_DRAFTv2], 1 Element for Data for Payload
    processors: Trust_processors,           ;[SUIT_DRAFTv2]; Array with 2 optional processing steps
    targets: Trust_target,                  ;[TRUST_PROP]; No Array as [SUIT_DRAFTv2] 1 Element for Target to update
    ;extensions : {},                       ;[SUIT_DRAFTv2]; Map with extensions, not used via empty list
]

IFX_DigestInfo = [
    digestAlgorithm: DigestAlgorithms,      ;[SUIT_DRAFTv3]; Digest algorithms
    digest: bstr .size IFX_DigestSize       ;[IFX_PROP]; size depending the IFX_DigestAlgorithm
]

Trust_resource  = [                         ;[TRUST_PROP]
    type: Trust_PayloadType,                ;[SUIT_DRAFTv2]; Custom Types are indicated via negative Value
    ;indicator: {},                         ;[SUIT_DRAFTv2]; = UriList: where to find the resource;
    size: uint .size 4,                     ;[SUIT_DRAFTv2]; Size of the resource; Length of payload to be updated in the target object
    ;digest: DigestInfo,                    ;[SUIT_DRAFTv2]; Digest of complete payload. Not considered/supported

    ;IFX Extensions
    Trust_PayloadVersion: uint .size 2,     ;[TRUST_PROP] Payload Version - up to (2^15 - 1 = 32767)

    ;Additional Info has a different set of information, based on Trust_PayloadType chosen
    AdditionalInfo: Trust_AddInfo_Data / Trust_AddInfo_Key / Trust_AddInfo_Metadata,;(TRUST_PROP); for Trust_PayloadType = Payload_Data
                                                                                    ;(TRUST_PROP); for Trust_PayloadType = Payload_Key 
                                                                                    ;(TRUST_PROP); for Trust_PayloadType = Payload_Metadata
]

Trust_AddInfo_Data = [                            ;[TRUST_PROP]; Additional information for the payload type = Payload_Data
    offset: uint .size 4,                         ;[TRUST_PROP]; Offset from which the data to be updated 
    write_type: Trust_AddInfo_WriteType           ;[TRUST_PROP]; Specifies the type of update/write in the target
]

Trust_AddInfo_Key = [                             ;[TRUST_PROP]; = Additional information for the payload Type = Payload_Key
    key_algo: Trust_KeyAlgorithms,                ;[TRUST_PROP]; Type of key
    key_usage: uint .size 1,                      ;[TRUST_PROP]; Usage of the key(authentication/key agreement/Encryption/...) from Key Usage Identifier table
]

Trust_AddInfo_Metadata = [                        ; [TRUST_PROP]; = Additional information for the payload Type = Payload_Metadata
    content_reset: uint .size 1                   ; This flag specifies the rule to reset the content (data/key part) in the target OID
                                                  ; 0 - as per metadata update identifier flag;
                                                  ; 1 - resets the Target OID content with zeroes. This is applicable only if target OID ; metadata update identifier doesn't specify the reset type (write zeroes or random)
                                                  ; 2 - resets the Target OID content with random data. This is applicable only if target ; OID metadata update identifier doesn't specify the reset type (write zeroes or random)
    additional_flag: uint .size 1                 ; reserved for future usage.
]

Trust_target = [                                  ;[TRUST_PROP] based on  [SUIT_DRAFTv2]
    componentIdentifier: bstr .size 0/25,         ;[SUIT_DRAFTv2]; Co-processor UID OPTIGA(TM) Trust
                                                  ;25 bytes (without ESW Build/version information) for Unicast, 
                                                  ;0 Bytes for the Broadcast operations
    storageIdentifier: bstr .size 2,              ;[SUIT_DRAFTv2]; Update Target of the Payload; OPTIGA(TM) Object ID (IFX_PROP)
    ;encoding: bstr .size 1,                      ;[SUIT_DRAFTv2]; the format of the resource;
]

Trust_processors = [                              ;[SUIT_DRAFTv2]; = [ * ProcessingStep ]: Array of processing steps
    ProcessingStep1: ProcessingStep_integrity,    ;[SUIT_DRAFTv2]; = first processing step is to check the Fragment Integrity
    ProcessingStep2: ProcessingStep_decrypt/nil,  ;[SUIT_DRAFTv2]; = second processing step is to decrypt the Payload
]

ProcessingStep_integrity = [                      ;[SUIT_DRAFTv2]; = Custom ProcessingStep       
    process: -1,                                  ;[TRUST_PROP]; Check Integrity of first fragment
    parameters: bstr .cbor IFX_DigestInfo,        ;[TRUST_PROP]; Digest of first fragment
]

ProcessingStep_decrypt = [                        ;[SUIT_DRAFTv2]; = Decrypt ProcessingStep
    process: 1,                                   ;[SUIT_DRAFTv2]; = decrypt: 1
    parameters: COSE_Encrypt_Trust                ;[SUIT_DRAFTv2]; COSE_Encrypt
]

;
; Layer 0: The Content Encryption Layer. 
; This layer contains information about encrypting the Payload
;
COSE_Encrypt_Trust = [                                      ;[TRUST_PROP]; = COSE_Encrypt from [COSE] as a base
    protected: bstr .cbor protected-encrypt-header-Trust,   ;[COSE]; = empty_or_serialized_map; Protected header as cbor
    ;unprotected: nil,                                      ;[COSE]; = header_map; Unprotected header , IV not supported
    ;ciphertext: nil,                                       ;[COSE]; Encrypted OPTIGA(TM) Trust Data/Key Object payload, 'Detached'
    recipients : [COSE_Recipient_Trust],                    ;[COSE]; = COSE_Recipient for Key Distribution;
    AdditionalInfo: nil,                                    ;[TRUST_PROP]; 
]

protected-encrypt-header-Trust = {    ;[COSE]; = header_map
    1 => 10,                          ;[COSE]; alg: AES-CCM-16-64-128, 128-bit key, 64-bit Authentication(MAC) tag, 13-byte nonce 
}

;
; Layer 1: The Key Distribution Layer. 
; This layer contains information about distribution the Content Encryption Key used in Layer 0
;
COSE_Recipient_Trust = [                                    ;[COSE]; = COSE_Recipient
    ;unprotected: unprotected-recipient-header,             ;[COSE]; = header_map;
    protected: bstr .cbor protected-recipient-header-Trust, ;[COSE]; = empty_or_serialized_map
    ciphertext : nil,                                       ;[COSE]; No Key Data Transmitted, since derived
]

Trust_Key_derivation_IV = [
    label: bstr .size (0..32),         ;[TRUST_PROP] 0-32 bytes
    seed: bstr .size (16..64),         ;[TRUST_PROP] 16-64 bytes of random data
] /bstr

protected-recipient-header-Trust = {   ;[COSE]; = header_map; Protected header of COSE_Recipient_Trust
    4 => bstr .size 2,                 ;[COSE]; kid: OID for Shared Secret
    1 => KeyDerivationAlgorithms,      ;One of the key derivation algorithm defined in KeyDerivationAlgorithms
    5 => Trust_Key_derivation_IV,      ;[COSE]; IV: Nonce for Key Derivation Function
                                       ;The (label || seed) is to be used while deriving the encryption/decryption keys
}
