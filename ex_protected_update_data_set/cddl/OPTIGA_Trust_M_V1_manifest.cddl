; OPTIGA(TM) Trust (Family Trust X, Trust M...) Manifest (v1)
;
; This file contains a CDDL (CBOR Data Definition Language) definition for a Manifest used within OPTIGA(TM) Trust Protected update feature.
; It describes the serialization format of a manifest as CBOR.
;
; The manifest contains metadata about an OPTIGA(TM) Trust data/key object image (Payload Resource) and to which target object it applies.
; The manifest itself is protected via a COSE Signature Container.
; Optionally the data object image is encrypted via a COSE Encryption Container.
;
; The Processing Steps how to apply the Payload Resource to the Target are described as separate Processing Array.
;
; Naming Conventions:
; (1) Existing CDDL Definitions profiled for OPTIGA(TM) Trust are enhanced 
;     at the END with _Trust
;     e.g. COSE_Sign1_Trust
; (2) Definitions specific for OPTIGA(TM) Trust are defined with Trust_ in the 
;     beginning, the same ways as done in COSE (where COSE_ is at the beginning)
;     e.g. Trust_PayloadVersion
; (3) Definition used by OPTIGA(TM) Trust and OPTIGA(TM) TPM are defined with 
;     IFX_ in the beginning
;     e.g. IFX_DigestSize
;
; Links:
; [CBOR]: https://tools.ietf.org/html/rfc7049 
; [CDDL]: https://tools.ietf.org/html/draft-ietf-cbor-cddl-05
; [COSE]: https://tools.ietf.org/html/rfc8152
; [SUIT_DRAFTv2]: https://tools.ietf.org/html/draft-moran-suit-manifest-02
; [SUIT_DRAFTv3]: https://tools.ietf.org/html/draft-moran-suit-manifest-03
; [COSE_RSA]: https://tools.ietf.org/html/rfc8230
;
; The range of proprietary values to be used [-65700.....-65899].
; RSA-SSA-PKCS1-V1_5-SHA-256 = -65700
; IFX_KDF-TLS12              = -65720
; 
; Untagged COSE Sign and know from Context, e.g. Trust implicitly knows 
; input to update command MUST be a COSE-Sign1 Message Type
; signed_Trust = #6.18(COSE_Sign1_Trust); see Table 1 in [COSE] 

; Define Signing Container with One Signer (COSE_Sign1)
COSE_Sign1_Trust = [
    protected: bstr .cbor protected-signed-header-Trust,
    unprotected: unprotected-signed-header-Trust,
    payload: bstr .cbor Trust_manifest,
    signature: bstr .size Trust_SignatureSize,
]

Trust_SignatureSize = &(
    ECC_256: 64,                            ;Raw signature: ECDSA (r|s) acc. to FIPS 186-4
                                            ;E.g. for ECC NIST P 256, size is 64 Bytes 
                                            ;(the 0's must be prepended if r/s component is less than key size)
    ECC_384: 96,                            ;Raw signature: ECDSA (r|s) acc. to FIPS 186-4
                                            ;E.g. for ECC NIST P 384, size is 96 Bytes 
                                            ;(the 0's must be prepended if r/s component is less than key size)
    RSA_1024_EXP: 128,                      ;RSA Raw Signature for the key length 1024 bits
    RSA_2048_EXP: 256,                      ;RSA Raw Signature for the key length 2048 bits
)

Trust_SignAlgorithms = &(
    ES-256: -7,                             ;[COSE]; ECDSA acc. to FIPS 186-4 and not deterministic version as suggested in Section 8.1 in COSE
    RSA-SSA-PKCS1-V1_5-SHA-256: -65700,     ;[TRUST_PROP]; RSASSA PKCS#1 V1.5 w/ SHA-256
)

IFX_DigestSize = &(
    SHA2-256-digest-size: 32,
)

DigestAlgorithms = &(                    
    SHA-256: 41,                            ;SHA2
) /uint .size 1

Trust_PayloadType  = &(                     ;[TRUST_PROP]
    Payload_Data: -1,                       ;[TRUST_PROP]; To send the data to OPTIGA(TM) Trust Data object
)

Trust_AddInfo_WriteType = &(                ;[TRUST_PROP]
    Write: 1,                               ;Updates/writes the data in the target oid, starting from the offset specified
                                            ;(Used Length gets updated to (Offset + Length of the data provided), 
                                            ;if this value is greater than the current value in the object metadata)

    EraseAndWrite: 2,                       ;Erases the complete data in the target oid, writes the data from the offset specified 
                                            ;(Used Length of the data object = Offset + Length of the data provided)
) /uint .size 1

protected-signed-header-Trust = {
    1 => Trust_SignAlgorithms,              ;[COSE] and [TRUST_PROP]
}

unprotected-signed-header-Trust = {
    4 => bstr .size 2,                      ;[COSE]; key identifier:Root of Trust, Trust Anchor OID
}

Trust_manifest = [                          ;[TRUST_PROP]; OPTIGA(TM) Trust Manifest
    manifestVersion: 1,                     ;[SUIT_DRAFTv2]; Manifest data model version
    ;digestInfo: DigestInfo,                ;[SUIT_DRAFTv2]; Digest algorithm used within manifest
    ;textReference: bstr,                   ;[SUIT_DRAFTv2]; Digest of the associated text map
    ;nonce: bstr .size 8,                   ;[SUIT_DRAFTv2]; Nonce 8 byte (IFX_PROP)
    ;sequence: uint,                        ;[SUIT_DRAFTv2]; SequenceNumber; 
                                            ;current UTC time as unix epoch (Unix timestamp in seconds); 
                                            ;Store as 8 byte value internally (IFX_PROP)
    preConditions: nil,                     ;[SUIT_DRAFTv2]; Array with preconditions, not used
    postConditions: nil,                    ;[SUIT_DRAFTv2]; Array with postconditions, not used
    ;directives: [],                        ;[SUIT_DRAFTv2]; Array with directives, not used
    resources: Trust_resource,              ;[TRUST_PROP]; No Array as [SUIT_DRAFTv2], 1 Element for Data for Payload
    processors: Trust_processors,           ;[SUIT_DRAFTv2]; Array with 2 optional processing steps
    targets: Trust_target,                  ;[TRUST_PROP]; No Array as [SUIT_DRAFTv2] 1 Element for Target to update
    ;extensions : {},                       ;[SUIT_DRAFTv2]; Map with extensions, not used via empty list
]

IFX_DigestInfo = [
    digestAlgorithm: DigestAlgorithms,      ;[SUIT_DRAFTv3]; Digest algorithms
    digest: bstr .size IFX_DigestSize       ;[IFX_PROP]; size depending the IFX_DigestAlgorithm
]

Trust_resource  = [                         ;[TRUST_PROP]
    type: Trust_PayloadType,                ;[SUIT_DRAFTv2]; Custom Types are indicated via negative Value
    ;indicator: {},                         ;[SUIT_DRAFTv2]; = UriList: where to find the resource;
    size: uint .size 2,                     ;[SUIT_DRAFTv2]; Size of the resource; Length of payload to be updated in the target object
    ;digest: DigestInfo,                    ;[SUIT_DRAFTv2]; Digest of complete payload. Not considered/supported

    ;IFX Extensions
    Trust_PayloadVersion: uint .size 2,     ;[TRUST_PROP] Payload Version - up to (2^15 - 1 = 32767)

    ;Additional Info has a different set of information, based on Trust_PayloadType chosen.
    AdditionalInfo: Trust_AddInfo_Data,     ;(TRUST_PROP); for Trust_PayloadType = Payload_Data
]

Trust_AddInfo_Data = [                            ;[TRUST_PROP]; Additional information for the payload type = Payload_Data
    offset: uint .size 2,                         ;[TRUST_PROP]; Offset from which the data to be updated 
    write_type: Trust_AddInfo_WriteType           ;[TRUST_PROP]; Specifies the type of update/write in the target
]

Trust_target = [                                  ;[TRUST_PROP] based on  [SUIT_DRAFTv2]
    componentIdentifier: bstr .size 0,            ;[SUIT_DRAFTv2]; 0 Bytes for the Broadcast operations
                                                  ;Reserved for future use to enable uni-cast operations.
    storageIdentifier: bstr .size 2,              ;[SUIT_DRAFTv2]; Update Target of the Payload; OPTIGA(TM) Object ID (IFX_PROP)
    ;encoding: bstr .size 1,                      ;[SUIT_DRAFTv2]; the format of the resource;
]

Trust_processors = [                              ;[SUIT_DRAFTv2]; = [ * ProcessingStep ]: Array of processing steps
    ProcessingStep1: ProcessingStep_integrity,    ;[SUIT_DRAFTv2]; = first processing step is to check the Fragment Integrity
    ProcessingStep2: nil,                         ;[SUIT_DRAFTv2]; = second processing step is not defined. This is reserved for future use for confidentiality purpose.
]

ProcessingStep_integrity = [                      ;[SUIT_DRAFTv2]; = Custom ProcessingStep       
    process: -1,                                  ;[TRUST_PROP]; Check Integrity of first fragment
    parameters: bstr .cbor IFX_DigestInfo,        ;[TRUST_PROP]; Digest of first fragment
]
